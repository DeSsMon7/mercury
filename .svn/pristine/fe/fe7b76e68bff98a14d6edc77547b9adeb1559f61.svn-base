package com.ash.mercury.login;

import com.ash.mercury.customer.control.ShaConverter;
import javax.faces.application.FacesMessage;
import javax.inject.Named;
import javax.enterprise.context.SessionScoped;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;
import com.ash.mercury.login.dao.LoginDAO;
import com.ash.mercury.login.beans.SessionUtils;
import com.ash.mercury.employee.control.EmployeeFacade;
import java.io.IOException;
import java.io.Serializable;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.faces.event.AjaxBehaviorEvent;
import javax.inject.Inject;

@SessionScoped
@Named
public class Login implements Serializable {

    private static final long serialVersionUID = 1L;

    private String employeePassword;
    private String msg;
    private String employeeLogin;
    private String employeeRole;
    DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    Date dateNow = new Date();

    @Inject
    EmployeeFacade efacade;

    public String getEmployeePassword() {
        return employeePassword;
    }

    public void setEmployeePassword(String employeePassword) {
        this.employeePassword = employeePassword;
    }

    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

    public String getEmployeeLogin() {
        return employeeLogin;
    }

    public void setEmployeeLogin(String employeeLogin) {
        this.employeeLogin = employeeLogin;
    }

    public String getEmployeeRole() {
        return employeeRole;
    }

    public void setEmployeeRole(String employeeRole) {
        this.employeeRole = employeeRole;
    }

    //validate login
    public String validateUsernamePassword() {
        System.out.println("Button login pressed!");
        System.out.println("Employee logged in: " + employeeLogin);
        System.out.println("Employee Role: " + employeeRole);
        System.out.println("Date login: " + dateNow);
        System.out.println(" ");
        System.out.println("-----");

        String passwordHash = ShaConverter.generateHash(employeePassword);
        boolean valid = LoginDAO.validate(employeeLogin, passwordHash);
        Number resultUserId = efacade.findLoggedEmployeeId(employeeLogin);
        if (resultUserId == null) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error!", "Потребителят не е намерен!"));
            return null;
        }
        if (resultUserId.longValue() >= 0) {
            System.out.println("Validating username and password> Setting up User Id for the session...: " + resultUserId.longValue());
            employeeRole = efacade.findLoggedEmployeeRole((Integer) resultUserId);
            System.out.println("EmployeeRole is set to : " + employeeRole);
        } else {
            System.out.println("resultList error");
        }
        if (valid || employeeRole.equals("admin")) {
            HttpSession session = SessionUtils.getSession();
            session.setAttribute("employeeId", resultUserId);
            session.setAttribute("employeeLogin", employeeLogin);
            session.setAttribute("employeeRole", employeeRole);
            FacesContext.getCurrentInstance().addMessage(
                    null,
                    new FacesMessage(FacesMessage.SEVERITY_INFO,
                            "Здравей,",
                            employeeLogin));
            return "index?faces-redirect=true";
        } if (employeeRole.isEmpty()) {
            HttpSession session = SessionUtils.getSession();
            session.setAttribute("employeeId", resultUserId);
            session.setAttribute("employeeLogin", employeeLogin);
            session.setAttribute("employeeRole", employeeRole);
            FacesContext.getCurrentInstance().addMessage(
                    null,
                    new FacesMessage(FacesMessage.SEVERITY_WARN,
                            "Incorrect employee role!",
                            "You are not authorized! Contact with admin!"));
            return "login";
        } else {
            return "index";
        }
    }

    //logout event, invalidate session
    public void logout(AjaxBehaviorEvent e) throws IOException {
        FacesContext.getCurrentInstance().addMessage(
                null,
                new FacesMessage(FacesMessage.SEVERITY_WARN,
                        "Вие излязохте!",
                        "Няма да бъдете пренасочени!"));
        HttpSession session = SessionUtils.getSession();
        session.invalidate();
    }

//    public String exitSession(ActionEvent event){
//        System.out.println("logout button Pressed!");
//        return "index?faces-redirect=true";
//    }
    public void captcha() {
        FacesMessage msg1 = new FacesMessage(FacesMessage.SEVERITY_INFO, "Браво", "А сега се логнете!");
        FacesContext.getCurrentInstance().addMessage(null, msg1);
    }

}
